//////// Minimize Malware Spread ///////
/* 
You are given a network of n nodes represented as an n x n adjacency matrix graph, 
where the ith node is directly connected to the jth node if graph[i][j] == 1.

Some nodes initial are initially infected by malware. Whenever two nodes are directly connected, 
and at least one of those two nodes is infected by malware, both nodes will be infected by malware. 
This spread of malware will continue until no more nodes can be infected in this manner.

Suppose M(initial) is the final number of nodes infected with malware in the entire network after 
the spread of malware stops. We will remove exactly one node from initial.

Return the node that, if removed, would minimize M(initial). If multiple nodes could be removed 
to minimize M(initial), return such a node with the smallest index.

Note that if a node was removed from the initial list of infected nodes, it might still be 
infected later due to the malware spread.*/

// var minMalwareSpread = function(graph, initial) {

//     let N = graph.length
//     let colors = new Array(N)
//     Array.fill(colors, -1)

//     let C = 0

//         for (let node = 0; node < N; node++)
//             if (colors[node] == -1)
//                 dfs(graph, colors, node, C++);

//         // 2. Size of each color.
//         // int[] size = new int[C];
//         let size = []

//         for (const color of colors) {
//             size[color]++;
//         }

//         // 3. Find unique colors.
//         // int[] colorCount = new int[C];
//         let colorCount = 0;
//         for (int node: initial)
//             colorCount[colors[node]]++;

//         // 4. Answer
//         int ans = Integer.MAX_VALUE;
//         for (int node: initial) {
//             int c = colors[node];
//             if (colorCount[c] == 1) {
//                 if (ans == Integer.MAX_VALUE)
//                     ans = node;
//                 else if (size[c] > size[colors[ans]])
//                     ans = node;
//                 else if (size[c] == size[colors[ans]] && node < ans)
//                     ans = node;
//             }
//         }

//         if (ans == Integer.MAX_VALUE)
//             for (int node: initial)
//                 ans = Math.min(ans, node);

//         return ans;

// };

// class Solution {
//     public int minMalwareSpread(int[][] graph, int[] initial) {
//         // 1. Color each component.
//         // colors[node] = the color of this node.

//         int N = graph.length;
//         int[] colors = new int[N];
//         Arrays.fill(colors, -1);
//         int C = 0;

//         for (int node = 0; node < N; ++node)
//             if (colors[node] == -1)
//                 dfs(graph, colors, node, C++);

//         // 2. Size of each color.
//         int[] size = new int[C];
//         for (int color: colors)
//             size[color]++;

//         // 3. Find unique colors.
//         int[] colorCount = new int[C];
//         for (int node: initial)
//             colorCount[colors[node]]++;

//         // 4. Answer
//         int ans = Integer.MAX_VALUE;
//         for (int node: initial) {
//             int c = colors[node];
//             if (colorCount[c] == 1) {
//                 if (ans == Integer.MAX_VALUE)
//                     ans = node;
//                 else if (size[c] > size[colors[ans]])
//                     ans = node;
//                 else if (size[c] == size[colors[ans]] && node < ans)
//                     ans = node;
//             }
//         }

//         if (ans == Integer.MAX_VALUE)
//             for (int node: initial)
//                 ans = Math.min(ans, node);

//         return ans;
//     }

//     public void dfs(int[][] graph, int[] colors, int node, int color) {
//         colors[node] = color;
//         for (int nei = 0; nei < graph.length; ++nei)
//             if (graph[node][nei] == 1 && colors[nei] == -1)
//                 dfs(graph, colors, nei, color);
//     }
// }
